import pandas as pd
import numpy as np
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline

muscle_mass_df = pd.read_csv("muscle_mass.csv")
muscle_mass_df.sort_values(by="training_time", inplace=True)  # отсортировать данные по первой колонке

df_train, df_test = train_test_split(muscle_mass_df, train_size=0.7, test_size=0.3, random_state=10) # разбиваем данные для обучения и теста (70/30)

X_train = df_train['training_time'] #список данных для тренировки
X_train = X_train.values.reshape(-1, 1)#преобразовуем список в столбец от первого до последнеге(-1) и убирает нумерацию строк
y_train = df_train['muscle_mass']
X_test = df_test['training_time']
X_test = X_test.values.reshape(-1, 1)
y_test = df_test['muscle_mass']

test_MSE_scores = []

for degree in range(1, 10):
    model = make_pipeline(PolynomialFeatures(degree), LinearRegression()) #класс Pipeline функционирует как составной (конвейерный) классификатор

    model.fit(X_train, y_train)

    train_MSE = sklearn.metrics.mean_squared_error(y_train, model.predict(X_train))

    test_MSE = sklearn.metrics.mean_squared_error(y_test, model.predict(X_test))


    print("Polynomial degree {0}: train MSE={1}, test MSE={2}".format(degree, train_MSE, test_MSE))
    test_MSE_scores.append(test_MSE)


print("Best degree:")
print(np.argmin(test_MSE_scores)+1) #Функция argmin() возвращает индекс минимального значения вдоль листа
